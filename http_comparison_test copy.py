import asyncio
import time
import httpx
import random
from collections import defaultdict
import statistics

class SimpleBrowserAPITest:
    def __init__(self, base_url):
        self.base_url = base_url
        self.results = defaultdict(list)
    
    async def test_protocol(self, use_http2=False, test_name="Test"):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –±—Ä–∞—É–∑–µ—Ä–æ–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"""
        protocol = "HTTP/2" if use_http2 else "HTTP/1.1"
        print(f"üåê {test_name} —Å {protocol}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        client_kwargs = {
            'http2': use_http2,
            'verify': False,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL –¥–ª—è localhost
            'timeout': 30.0,
            'headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json, */*',
                'Accept-Encoding': 'gzip, deflate, br',
            },
            'limits': httpx.Limits(
                max_connections=100 if use_http2 else 6,  # –ö–ª—é—á–µ–≤–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ!
                max_keepalive_connections=20 if use_http2 else 6,
            )
        }
        
        if not use_http2:
            client_kwargs['http1'] = True
        
        all_response_times = []
        successful_requests = 0
        total_requests = 0
        
        async with httpx.AsyncClient(**client_kwargs) as client:
            # –§–∞–∑–∞ 1: –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            print("  üìä –§–∞–∑–∞ 1: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)")
            
            # –°–æ–∑–¥–∞–µ–º 15-20 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            phase1_tasks = []
            for i in range(18):
                if i % 2 == 0:  # 50% –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                    phase1_tasks.append(self._make_simple_request(client, "/products"))
                else:  # 50% –Ω–∞ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                    product_id = random.randint(1, 100)
                    phase1_tasks.append(self._make_simple_request(client, f"/products/{product_id}"))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            phase1_start = time.time()
            phase1_results = await asyncio.gather(*phase1_tasks, return_exceptions=True)
            phase1_duration = time.time() - phase1_start
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in phase1_results:
                total_requests += 1
                if isinstance(result, dict) and result['success']:
                    successful_requests += 1
                    all_response_times.append(result['duration'])
            
            print(f"    ‚úÖ {len(phase1_tasks)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {phase1_duration:.3f}—Å")
            
            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ (–∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏)
            await asyncio.sleep(0.2)
            
            # –§–∞–∑–∞ 2: –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π - –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ª–Ω –∑–∞–ø—Ä–æ—Å–æ–≤
            print("  üìä –§–∞–∑–∞ 2: –í–æ–ª–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
            
            # –°–æ–∑–¥–∞–µ–º 30 –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–ª–Ω–∞–º–∏
            all_phase2_tasks = []
            for i in range(30):
                if i % 3 == 0:  # 33% –Ω–∞ —Å–ø–∏—Å–æ–∫
                    all_phase2_tasks.append(self._make_simple_request(client, "/products"))
                else:  # 67% –Ω–∞ –¥–µ—Ç–∞–ª–∏
                    product_id = random.randint(1, 100)
                    all_phase2_tasks.append(self._make_simple_request(client, f"/products/{product_id}"))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–ª–Ω–∞–º–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
            wave_sizes = [6, 8, 4, 7, 5]  # –†–∞–∑–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
            phase2_start = time.time()
            
            task_index = 0
            wave_num = 0
            
            while task_index < len(all_phase2_tasks):
                wave_size = wave_sizes[wave_num % len(wave_sizes)]
                current_wave = all_phase2_tasks[task_index:task_index + wave_size]
                
                # –ù–µ–±–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
                if wave_num > 0:
                    await asyncio.sleep(random.uniform(0.05, 0.1))
                
                wave_results = await asyncio.gather(*current_wave, return_exceptions=True)
                
                for result in wave_results:
                    total_requests += 1
                    if isinstance(result, dict) and result['success']:
                        successful_requests += 1
                        all_response_times.append(result['duration'])
                
                task_index += wave_size
                wave_num += 1
            
            phase2_duration = time.time() - phase2_start
            print(f"    ‚úÖ {len(all_phase2_tasks)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {phase2_duration:.3f}—Å")
            
            # –§–∞–∑–∞ 3: –§–æ–Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∏–º–∏—Ç–∞—Ü–∏—è lazy loading)
            print("  üìä –§–∞–∑–∞ 3: –§–æ–Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
            
            phase3_tasks = []
            for i in range(12):
                if random.random() > 0.3:
                    phase3_tasks.append(self._make_simple_request(client, "/products"))
                else:
                    product_id = random.randint(1, 100)
                    phase3_tasks.append(self._make_simple_request(client, f"/products/{product_id}"))
            
            phase3_start = time.time()
            phase3_results = await asyncio.gather(*phase3_tasks, return_exceptions=True)
            phase3_duration = time.time() - phase3_start
            
            for result in phase3_results:
                total_requests += 1
                if isinstance(result, dict) and result['success']:
                    successful_requests += 1
                    all_response_times.append(result['duration'])
            
            print(f"    ‚úÖ {len(phase3_tasks)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {phase3_duration:.3f}—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_duration = phase1_duration + phase2_duration + phase3_duration
        
        stats = {
            'protocol': protocol,
            'total_duration': total_duration,
            'total_requests': total_requests,
            'successful_requests': successful_requests,
            'success_rate': (successful_requests / total_requests) * 100 if total_requests > 0 else 0,
            'avg_response_time': statistics.mean(all_response_times) if all_response_times else 0,
            'p95_response_time': statistics.quantiles(all_response_times, n=20)[18] if len(all_response_times) >= 20 else 0,
            'requests_per_second': successful_requests / total_duration if total_duration > 0 else 0,
        }
        
        self.results[protocol].append(stats)
        return stats
    
    async def _make_simple_request(self, client, endpoint):
        """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = f"{self.base_url}{endpoint}"
        start_time = time.time()
        
        try:
            response = await client.get(url)
            duration = time.time() - start_time
            
            return {
                'success': response.status_code == 200,
                'duration': duration,
                'status_code': response.status_code
            }
        except Exception as e:
            return {
                'success': False,
                'duration': time.time() - start_time,
                'error': str(e)
            }
    
    def run_comparison(self, iterations=3):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ HTTP/1.1 –∏ HTTP/2"""
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –≠–ú–£–õ–Ø–¶–ò–ò –ë–†–ê–£–ó–ï–†–ê")
        print("="*50)
        print("–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
        print(f"  - {self.base_url}/products")
        print(f"  - {self.base_url}/products/{{id}}")
        print("="*50)
        
        async def run_tests():
            for i in range(iterations):
                print(f"\nüéØ –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}")
                print("-" * 40)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP/1.1
                http1_stats = await self.test_protocol(use_http2=False, test_name=f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                await asyncio.sleep(2)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP/2
                http2_stats = await self.test_protocol(use_http2=True, test_name=f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}")
                
                # –ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                rps_diff = ((http2_stats['requests_per_second'] - http1_stats['requests_per_second']) / 
                           http1_stats['requests_per_second'] * 100)
                print(f"    üîÑ RPS —Ä–∞–∑–Ω–∏—Ü–∞: {rps_diff:+.1f}%")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                if i < iterations - 1:
                    await asyncio.sleep(3)
        
        asyncio.run(run_tests())
        self._print_final_results()
    
    def _print_final_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        print("\n" + "="*70)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("="*70)
        
        if not self.results:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        http1_all = self.results['HTTP/1.1']
        http2_all = self.results['HTTP/2']
        
        def aggregate_stats(stats_list):
            return {
                'avg_rps': statistics.mean([s['requests_per_second'] for s in stats_list]),
                'avg_response_time': statistics.mean([s['avg_response_time'] for s in stats_list]),
                'avg_p95': statistics.mean([s['p95_response_time'] for s in stats_list]),
                'avg_success_rate': statistics.mean([s['success_rate'] for s in stats_list]),
                'total_requests': sum([s['total_requests'] for s in stats_list]),
                'total_duration': statistics.mean([s['total_duration'] for s in stats_list]),
            }
        
        http1_agg = aggregate_stats(http1_all)
        http2_agg = aggregate_stats(http2_all)
        
        # –†–∞—Å—á–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è
        rps_improvement = ((http2_agg['avg_rps'] - http1_agg['avg_rps']) / http1_agg['avg_rps']) * 100
        response_improvement = ((http1_agg['avg_response_time'] - http2_agg['avg_response_time']) / 
                               http1_agg['avg_response_time']) * 100
        
        print(f"\nüîµ HTTP/1.1 (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ {len(http1_all)} —Ç–µ—Å—Ç–∞–º):")
        print(f"   üìà –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {http1_agg['avg_rps']:.1f}")
        print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {http1_agg['avg_response_time']*1000:.1f} –º—Å")
        print(f"   üìä P95 –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {http1_agg['avg_p95']*1000:.1f} –º—Å")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {http1_agg['avg_success_rate']:.1f}%")
        
        print(f"\nüü¢ HTTP/2 (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ {len(http2_all)} —Ç–µ—Å—Ç–∞–º):")
        print(f"   üìà –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {http2_agg['avg_rps']:.1f}")
        print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {http2_agg['avg_response_time']*1000:.1f} –º—Å")
        print(f"   üìä P95 –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {http2_agg['avg_p95']*1000:.1f} –º—Å")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {http2_agg['avg_success_rate']:.1f}%")
        
        print(f"\nüéØ –°–†–ê–í–ù–ï–ù–ò–ï:")
        print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ RPS: {rps_improvement:+.1f}%")
        print(f"   ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: {response_improvement:+.1f}%")
        
        if rps_improvement > 5:
            print(f"\n‚úÖ HTTP/2 –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –ë–´–°–¢–†–ï–ï –Ω–∞ {rps_improvement:.1f}%!")
        elif rps_improvement > 0:
            print(f"\n‚úÖ HTTP/2 –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {rps_improvement:.1f}%")
        elif rps_improvement > -5:
            print(f"\n‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–∞")
        else:
            print(f"\n‚ùå HTTP/2 –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ {abs(rps_improvement):.1f}%")
        
        print(f"\nüí° –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print(f"   HTTP/1.1: {http1_agg['total_requests']}")
        print(f"   HTTP/2:   {http2_agg['total_requests']}")

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if __name__ == "__main__":
    base_url = "https://localhost"  # –í–∞—à URL
    
    # print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø...")
    # try:
    #     import requests
    #     requests.get(f"{base_url}/products", verify=False, timeout=5)
    #     print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    # except Exception as e:
    #     print(e)
    #     print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    #     exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    tester = SimpleBrowserAPITest(base_url)
    tester.run_comparison(iterations=3)  # 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏