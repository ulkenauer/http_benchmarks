import asyncio
import time
import httpx
import random

async def simple_http2_demo():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ HTTP/2"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û –¢–ï–°–¢–ê HTTP/1.1 vs HTTP/2")
    print("=" * 50)
    # return
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    for use_http2 in [False, True]:
        protocol = "HTTP/2" if use_http2 else "HTTP/1.1"
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {protocol}...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ - –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢!
        client_kwargs = {
            'http2': use_http2,
            'verify': False,
            'limits': httpx.Limits(
                max_connections=6 if not use_http2 else 1,  # –î–ª—è HTTP/1.1 - —Ç–æ–ª—å–∫–æ 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!
                max_keepalive_connections=6 if not use_http2 else 1,
            )
        }
        
        start_time = time.time()
        
        # print(client_kwargs)
        async with httpx.AsyncClient(**client_kwargs) as client:
            # –°–æ–∑–¥–∞–µ–º 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û
            tasks = []
            for i in range(300):
                if i % 2 == 0:
                    tasks.append(client.get("https://localhost/products"))
                else:
                    product_id = random.randint(1, 50)
                    tasks.append(client.get(f"https://localhost/products/{product_id}"))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
        
        total_time = time.time() - start_time
        
        # print(client.params)
        # print("HTTP VERSION")
        # for r in results:
        #     print(r)
        #     print(r.http_version)
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        success_count = sum(1 for r in results if isinstance(r, httpx.Response))
        rps = success_count / total_time
        
        print(f"‚úÖ {protocol}:")
        print(f"   {success_count}/30 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {total_time:.2f} —Å–µ–∫")
        print(f"   {rps:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É")
        
        # –î–ª—è HTTP/1.1 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É
        if not use_http2:
            print(f"   ‚ö†Ô∏è  HTTP/1.1 —Å 6 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏: –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û!")
        else:
            print(f"   üöÄ HTTP/2: –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –≤ –æ–¥–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏!")

async def advanced_demo():
    return
    """–ë–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    print("\n" + "=" * 60)
    print("üìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 60)
    
    for use_http2 in [False, True]:
        protocol = "HTTP/2" if use_http2 else "HTTP/1.1"
        print(f"\nüéØ {protocol} - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 20 –∑–∞–ø—Ä–æ—Å–æ–≤:")
        
        client_kwargs = {
            'http2': use_http2,
            'verify': False,
            'limits': httpx.Limits(max_connections=10 if not use_http2 else 10)
        }
        
        async with httpx.AsyncClient(**client_kwargs) as client:
            start_times = []
            end_times = []
            
            async def make_request(i):
                start = time.time()
                start_times.append(start)
                res = None
                if i % 2 == 0:
                    res = await client.get("https://localhost/products")
                else:
                    res = await client.get(f"https://localhost/products/{i % 10 + 1}")
                
                end = time.time()
                end_times.append(end)
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1:2d} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {(end-start):.3f}—Å")
                print(res)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            start_total = time.time()
            tasks = [make_request(i) for i in range(600)]
            await asyncio.gather(*tasks)
            total_time = time.time() - start_total
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if start_times and end_times:
                first_start = min(start_times)
                last_end = max(end_times)
                actual_duration = last_end - first_start
                
                print(f"\n   üìà –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
                print(f"   ‚è±Ô∏è  –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {actual_duration:.2f} —Å–µ–∫")
                print(f"   üí® –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {20/actual_duration:.1f} –∑–∞–ø—Ä/—Å–µ–∫")

if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    asyncio.run(simple_http2_demo())
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    asyncio.run(advanced_demo())
    
    # print("\n" + "=" * 60)
    # print("üí° –í–´–í–û–î:")
    # print("   HTTP/1.1 —Å 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º: –∑–∞–ø—Ä–æ—Å—ã –≤ –û–ß–ï–†–ï–î–ò")
    # print("   HTTP/2 —Å 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º: –∑–∞–ø—Ä–æ—Å—ã –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û")
    # print("   –≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ HTTP/2!")
    # print("=" * 60)