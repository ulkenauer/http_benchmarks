import asyncio
import ssl
from aioquic.asyncio import connect
from aioquic.quic.configuration import QuicConfiguration
from aioquic.h3.connection import H3Connection
from aioquic.h3.events import HeadersReceived, DataReceived

class Http3Client:
    def __init__(self):
        self.configuration = QuicConfiguration(
            alpn_protocols=["h3"],
            is_client=True,
        )
        self.configuration.verify_mode = ssl.CERT_NONE  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã

    async def test_connection(self):
        try:
            async with connect('localhost', 4433, configuration=self.configuration) as connection:
                print("‚úÖ QUIC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                http = H3Connection(connection)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å
                stream_id = http.send_headers([
                    (b":method", b"GET"),
                    (b":scheme", b"https"),
                    (b":authority", b"localhost:4433"),
                    (b":path", b"/products"),
                ])
                # http.send_data(stream_id, b"", end_stream=True)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                response_received = False
                while not response_received:
                    event = await http.receive_event()
                    if isinstance(event, HeadersReceived):
                        print(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏: {event.headers}")
                    elif isinstance(event, DataReceived):
                        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {event.data.decode()}")
                        response_received = True
                
                print("‚úÖ HTTP/3 –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

async def main():
    client = Http3Client()
    success = await client.test_connection()
    if success:
        print("\nüéâ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\nüí• –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º!")

if __name__ == "__main__":
    asyncio.run(main())